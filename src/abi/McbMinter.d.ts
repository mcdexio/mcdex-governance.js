/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface McbMinterInterface extends ethers.utils.Interface {
  functions: {
    "DEVELOPER_COMMISSION_RATE()": FunctionFragment;
    "MCB_MAX_SUPPLY()": FunctionFragment;
    "MINTER_ADMIN_ROLE()": FunctionFragment;
    "VALUE_CAPTURE_ROLE()": FunctionFragment;
    "authenticator()": FunctionFragment;
    "baseMintState()": FunctionFragment;
    "developer()": FunctionFragment;
    "extraMintableAmount()": FunctionFragment;
    "genesisBlock()": FunctionFragment;
    "getMintableAmounts()": FunctionFragment;
    "initialize(address,address,address,uint256,uint128,uint128)": FunctionFragment;
    "lastCapturedBlock()": FunctionFragment;
    "lastCapturedValue()": FunctionFragment;
    "mcbToken()": FunctionFragment;
    "mintFromBase(address,uint256)": FunctionFragment;
    "mintFromRound(uint256,uint256)": FunctionFragment;
    "newRound(address,uint128,uint128,uint128)": FunctionFragment;
    "onValueCaptured(uint256,uint256)": FunctionFragment;
    "roundMintStates(uint256)": FunctionFragment;
    "setDeveloper(address)": FunctionFragment;
    "updateMintableAmount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEVELOPER_COMMISSION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MCB_MAX_SUPPLY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINTER_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALUE_CAPTURE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authenticator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "baseMintState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "developer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "extraMintableAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintableAmounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCapturedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastCapturedValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mcbToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mintFromBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromRound",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newRound",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onValueCaptured",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roundMintStates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeveloper",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMintableAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEVELOPER_COMMISSION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MCB_MAX_SUPPLY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINTER_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALUE_CAPTURE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authenticator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseMintState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "developer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "extraMintableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintableAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastCapturedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCapturedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mcbToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFromBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintFromRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onValueCaptured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roundMintStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeveloper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMintableAmount",
    data: BytesLike
  ): Result;

  events: {
    "BaseMint(address,uint256)": EventFragment;
    "BaseRelease(uint256)": EventFragment;
    "Mint(address,uint256,address,uint256)": EventFragment;
    "NewRound(uint256,uint128,uint128,uint128)": EventFragment;
    "OnValueCaptured(uint256,uint256)": EventFragment;
    "RoundMint(uint256,address,uint256)": EventFragment;
    "RoundRelease(uint256,uint256)": EventFragment;
    "SetDeveloper(address,address)": EventFragment;
    "UpdateBaseMintableAmount(uint256,uint256,uint256)": EventFragment;
    "UpdateExtraMintableAmount(uint256,uint256,uint256,uint256)": EventFragment;
    "UpdateSeriesAMintableAmount(uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OnValueCaptured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoundRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDeveloper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateBaseMintableAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExtraMintableAmount"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateSeriesAMintableAmount"
  ): EventFragment;
}

export class McbMinter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: McbMinterInterface;

  functions: {
    DEVELOPER_COMMISSION_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "DEVELOPER_COMMISSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MCB_MAX_SUPPLY(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MCB_MAX_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MINTER_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "MINTER_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    VALUE_CAPTURE_ROLE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "VALUE_CAPTURE_ROLE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    authenticator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "authenticator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    baseMintState(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "baseMintState()"(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    developer(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "developer()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    extraMintableAmount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "extraMintableAmount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    genesisBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "genesisBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getMintableAmounts(overrides?: Overrides): Promise<ContractTransaction>;

    "getMintableAmounts()"(overrides?: Overrides): Promise<ContractTransaction>;

    initialize(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint256,uint128,uint128)"(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastCapturedBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastCapturedBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastCapturedValue(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastCapturedValue()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    mcbToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "mcbToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    mintFromBase(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintFromBase(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mintFromRound(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mintFromRound(uint256,uint256)"(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    newRound(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "newRound(address,uint128,uint128,uint128)"(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    onValueCaptured(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onValueCaptured(uint256,uint256)"(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    roundMintStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "roundMintStates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    setDeveloper(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDeveloper(address)"(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMintableAmount(overrides?: Overrides): Promise<ContractTransaction>;

    "updateMintableAmount()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEVELOPER_COMMISSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "DEVELOPER_COMMISSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  MCB_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

  "MCB_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

  MINTER_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "MINTER_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  VALUE_CAPTURE_ROLE(overrides?: CallOverrides): Promise<string>;

  "VALUE_CAPTURE_ROLE()"(overrides?: CallOverrides): Promise<string>;

  authenticator(overrides?: CallOverrides): Promise<string>;

  "authenticator()"(overrides?: CallOverrides): Promise<string>;

  baseMintState(
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    maxSupply: BigNumber;
    rateLimitPerBlock: BigNumber;
    mintableAmount: BigNumber;
    lastUpdateBlock: BigNumber;
    mintedAmount: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "baseMintState()"(
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    maxSupply: BigNumber;
    rateLimitPerBlock: BigNumber;
    mintableAmount: BigNumber;
    lastUpdateBlock: BigNumber;
    mintedAmount: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  developer(overrides?: CallOverrides): Promise<string>;

  "developer()"(overrides?: CallOverrides): Promise<string>;

  extraMintableAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "extraMintableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  genesisBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "genesisBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  getMintableAmounts(overrides?: Overrides): Promise<ContractTransaction>;

  "getMintableAmounts()"(overrides?: Overrides): Promise<ContractTransaction>;

  initialize(
    authenticator_: string,
    mcbToken_: string,
    developer_: string,
    genesisBlock_: BigNumberish,
    baseInitialSupply_: BigNumberish,
    baseMinReleaseRate_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint256,uint128,uint128)"(
    authenticator_: string,
    mcbToken_: string,
    developer_: string,
    genesisBlock_: BigNumberish,
    baseInitialSupply_: BigNumberish,
    baseMinReleaseRate_: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastCapturedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastCapturedBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastCapturedValue(overrides?: CallOverrides): Promise<BigNumber>;

  "lastCapturedValue()"(overrides?: CallOverrides): Promise<BigNumber>;

  mcbToken(overrides?: CallOverrides): Promise<string>;

  "mcbToken()"(overrides?: CallOverrides): Promise<string>;

  mintFromBase(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintFromBase(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mintFromRound(
    index: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mintFromRound(uint256,uint256)"(
    index: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  newRound(
    recipient: string,
    maxSupply: BigNumberish,
    rateLimitPerBlock: BigNumberish,
    startBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "newRound(address,uint128,uint128,uint128)"(
    recipient: string,
    maxSupply: BigNumberish,
    rateLimitPerBlock: BigNumberish,
    startBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  onValueCaptured(
    totalCapturedUSD: BigNumberish,
    lastCapturedBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onValueCaptured(uint256,uint256)"(
    totalCapturedUSD: BigNumberish,
    lastCapturedBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  roundMintStates(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    maxSupply: BigNumber;
    rateLimitPerBlock: BigNumber;
    mintableAmount: BigNumber;
    lastUpdateBlock: BigNumber;
    mintedAmount: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  "roundMintStates(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    recipient: string;
    maxSupply: BigNumber;
    rateLimitPerBlock: BigNumber;
    mintableAmount: BigNumber;
    lastUpdateBlock: BigNumber;
    mintedAmount: BigNumber;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
  }>;

  setDeveloper(
    newDeveloper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDeveloper(address)"(
    newDeveloper: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMintableAmount(overrides?: Overrides): Promise<ContractTransaction>;

  "updateMintableAmount()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    DEVELOPER_COMMISSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEVELOPER_COMMISSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MCB_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MCB_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "MINTER_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    VALUE_CAPTURE_ROLE(overrides?: CallOverrides): Promise<string>;

    "VALUE_CAPTURE_ROLE()"(overrides?: CallOverrides): Promise<string>;

    authenticator(overrides?: CallOverrides): Promise<string>;

    "authenticator()"(overrides?: CallOverrides): Promise<string>;

    baseMintState(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "baseMintState()"(
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    developer(overrides?: CallOverrides): Promise<string>;

    "developer()"(overrides?: CallOverrides): Promise<string>;

    extraMintableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "extraMintableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableAmounts(
      overrides?: CallOverrides
    ): Promise<{
      baseMintableAmount: BigNumber;
      roundMintableAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    "getMintableAmounts()"(
      overrides?: CallOverrides
    ): Promise<{
      baseMintableAmount: BigNumber;
      roundMintableAmounts: BigNumber[];
      0: BigNumber;
      1: BigNumber[];
    }>;

    initialize(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint256,uint128,uint128)"(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastCapturedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCapturedBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastCapturedValue(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCapturedValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    mcbToken(overrides?: CallOverrides): Promise<string>;

    "mcbToken()"(overrides?: CallOverrides): Promise<string>;

    mintFromBase(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintFromBase(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintFromRound(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintFromRound(uint256,uint256)"(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    newRound(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "newRound(address,uint128,uint128,uint128)"(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onValueCaptured(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "onValueCaptured(uint256,uint256)"(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    roundMintStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    "roundMintStates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      recipient: string;
      maxSupply: BigNumber;
      rateLimitPerBlock: BigNumber;
      mintableAmount: BigNumber;
      lastUpdateBlock: BigNumber;
      mintedAmount: BigNumber;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
    }>;

    setDeveloper(
      newDeveloper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDeveloper(address)"(
      newDeveloper: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMintableAmount(overrides?: CallOverrides): Promise<void>;

    "updateMintableAmount()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    BaseMint(recipient: string | null, amount: null): EventFilter;

    BaseRelease(amount: null): EventFilter;

    Mint(
      recipient: string | null,
      toRecipientAmount: null,
      developer: string | null,
      toDevAmount: null
    ): EventFilter;

    NewRound(
      index: null,
      maxSupply: null,
      rateLimitPerBlock: null,
      startBlock: null
    ): EventFilter;

    OnValueCaptured(
      totalCapturedUSD: null,
      lastCapturedBlock: null
    ): EventFilter;

    RoundMint(index: null, recipient: string | null, amount: null): EventFilter;

    RoundRelease(index: null, amount: null): EventFilter;

    SetDeveloper(
      oldDeveloper: string | null,
      newDeveloper: string | null
    ): EventFilter;

    UpdateBaseMintableAmount(
      lastUpdateBlock: null,
      currentBlock: null,
      baseMintableAmount: null
    ): EventFilter;

    UpdateExtraMintableAmount(
      lastCapturedBlock: null,
      capturedBlock: null,
      capturedValue: null,
      extraMintableAmount: null
    ): EventFilter;

    UpdateSeriesAMintableAmount(
      lastUpdateBlock: null,
      currentBlock: null,
      seriesAMintableAmount: null,
      extraMintableAmount: null
    ): EventFilter;
  };

  estimateGas: {
    DEVELOPER_COMMISSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEVELOPER_COMMISSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MCB_MAX_SUPPLY(overrides?: CallOverrides): Promise<BigNumber>;

    "MCB_MAX_SUPPLY()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINTER_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "MINTER_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    VALUE_CAPTURE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "VALUE_CAPTURE_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    authenticator(overrides?: CallOverrides): Promise<BigNumber>;

    "authenticator()"(overrides?: CallOverrides): Promise<BigNumber>;

    baseMintState(overrides?: CallOverrides): Promise<BigNumber>;

    "baseMintState()"(overrides?: CallOverrides): Promise<BigNumber>;

    developer(overrides?: CallOverrides): Promise<BigNumber>;

    "developer()"(overrides?: CallOverrides): Promise<BigNumber>;

    extraMintableAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "extraMintableAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    getMintableAmounts(overrides?: Overrides): Promise<BigNumber>;

    "getMintableAmounts()"(overrides?: Overrides): Promise<BigNumber>;

    initialize(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint256,uint128,uint128)"(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastCapturedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCapturedBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastCapturedValue(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCapturedValue()"(overrides?: CallOverrides): Promise<BigNumber>;

    mcbToken(overrides?: CallOverrides): Promise<BigNumber>;

    "mcbToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintFromBase(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintFromBase(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mintFromRound(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mintFromRound(uint256,uint256)"(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    newRound(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "newRound(address,uint128,uint128,uint128)"(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    onValueCaptured(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onValueCaptured(uint256,uint256)"(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    roundMintStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "roundMintStates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDeveloper(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDeveloper(address)"(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMintableAmount(overrides?: Overrides): Promise<BigNumber>;

    "updateMintableAmount()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEVELOPER_COMMISSION_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEVELOPER_COMMISSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MCB_MAX_SUPPLY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MCB_MAX_SUPPLY()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINTER_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINTER_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    VALUE_CAPTURE_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "VALUE_CAPTURE_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authenticator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "authenticator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseMintState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseMintState()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    developer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "developer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extraMintableAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "extraMintableAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintableAmounts(overrides?: Overrides): Promise<PopulatedTransaction>;

    "getMintableAmounts()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint256,uint128,uint128)"(
      authenticator_: string,
      mcbToken_: string,
      developer_: string,
      genesisBlock_: BigNumberish,
      baseInitialSupply_: BigNumberish,
      baseMinReleaseRate_: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastCapturedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastCapturedBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastCapturedValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastCapturedValue()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mcbToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mcbToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintFromBase(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintFromBase(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mintFromRound(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mintFromRound(uint256,uint256)"(
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    newRound(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "newRound(address,uint128,uint128,uint128)"(
      recipient: string,
      maxSupply: BigNumberish,
      rateLimitPerBlock: BigNumberish,
      startBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    onValueCaptured(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onValueCaptured(uint256,uint256)"(
      totalCapturedUSD: BigNumberish,
      lastCapturedBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    roundMintStates(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "roundMintStates(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDeveloper(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDeveloper(address)"(
      newDeveloper: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMintableAmount(overrides?: Overrides): Promise<PopulatedTransaction>;

    "updateMintableAmount()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
